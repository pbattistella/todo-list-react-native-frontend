{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useEffect, useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport TaskInputField from \"./src/components/TaskinputField\";\nimport TaskItem from \"./src/components/TaskItem\";\nimport styles from \"./src/styles/app\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar App = function App() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      tasks = _useState2[0],\n      setTasks = _useState2[1];\n\n  var addTask = function addTask(task) {\n    if (task == null) return;\n    setTasks([].concat(_toConsumableArray(tasks), [task]));\n    Keyboard.dismiss();\n  };\n\n  var _deleteTask = function _callee(deleteIndex) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setTasks(tasks.filter(function (value, index) {\n              return index != deleteIndex;\n            }));\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var getTasks = function _callee2() {\n    var response, data;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(fetch('http://localhost:3000/task'));\n\n          case 3:\n            response = _context2.sent;\n            data = response.json();\n            data.then(function (val) {\n              return setTasks(val);\n            });\n            _context2.next = 12;\n            break;\n\n          case 8:\n            _context2.prev = 8;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.error(_context2.t0);\n            setTasks([]);\n\n          case 12:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 8]], Promise);\n  };\n\n  useEffect(function () {\n    getTasks();\n  }, []);\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.title,\n      children: \" Lista de Tarefas\"\n    }), _jsx(ScrollView, {\n      style: styles.scrollView,\n      children: tasks.map(function (data) {\n        return _jsx(View, {\n          style: styles.taskContainer,\n          children: _jsx(TaskItem, {\n            index: data.id,\n            task: data.descricao,\n            deleteTask: function deleteTask() {\n              return _deleteTask(data.id);\n            }\n          })\n        }, data.id);\n      })\n    }), _jsx(TaskInputField, {\n      addTask: addTask\n    })]\n  });\n};\n\nexport default App;","map":{"version":3,"sources":["/home/pbattistella/desenvolvimento/react-native/todolist-backend-frontend/frontend/App.js"],"names":["useEffect","useState","TaskInputField","TaskItem","styles","App","tasks","setTasks","addTask","task","Keyboard","dismiss","deleteTask","deleteIndex","filter","value","index","getTasks","fetch","response","data","json","then","val","console","error","container","title","scrollView","map","taskContainer","id","descricao"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;;;;AAEA,OAAOC,cAAP;AACA,OAAOC,QAAP;AACA,OAAOC,MAAP;;;;AAEA,IAAMC,GAAG,GAAG,SAANA,GAAM,GAAM;AACd,kBAA0BJ,QAAQ,CAAC,EAAD,CAAlC;AAAA;AAAA,MAAOK,KAAP;AAAA,MAAcC,QAAd;;AAEA,MAAMC,OAAO,GAAG,SAAVA,OAAU,CAAAC,IAAI,EAAI;AACpB,QAAIA,IAAI,IAAI,IAAZ,EAAkB;AAClBF,IAAAA,QAAQ,8BAAKD,KAAL,IAAYG,IAAZ,GAAR;AACAC,IAAAA,QAAQ,CAACC,OAAT;AACH,GAJD;;AAMA,MAAMC,WAAU,GAAG,iBAAMC,WAAN;AAAA;AAAA;AAAA;AAAA;AACfN,YAAAA,QAAQ,CAACD,KAAK,CAACQ,MAAN,CAAa,UAACC,KAAD,EAAQC,KAAR;AAAA,qBAAkBA,KAAK,IAAIH,WAA3B;AAAA,aAAb,CAAD,CAAR;;AADe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAnB;;AAIA,MAAMI,QAAQ,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEcC,KAAK,CAAC,4BAAD,CAFnB;;AAAA;AAEHC,YAAAA,QAFG;AAGHC,YAAAA,IAHG,GAGID,QAAQ,CAACE,IAAT,EAHJ;AAITD,YAAAA,IAAI,CAACE,IAAL,CACI,UAACC,GAAD;AAAA,qBAAShB,QAAQ,CAACgB,GAAD,CAAjB;AAAA,aADJ;AAJS;AAAA;;AAAA;AAAA;AAAA;AAQTC,YAAAA,OAAO,CAACC,KAAR;AACAlB,YAAAA,QAAQ,CAAC,EAAD,CAAR;;AATS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAaAP,EAAAA,SAAS,CAAE,YAAM;AACbiB,IAAAA,QAAQ;AACX,GAFQ,EAEN,EAFM,CAAT;AAIA,SACI,MAAC,IAAD;AAAM,IAAA,KAAK,EAAEb,MAAM,CAACsB,SAApB;AAAA,eACI,KAAC,IAAD;AAAM,MAAA,KAAK,EAAEtB,MAAM,CAACuB,KAApB;AAAA;AAAA,MADJ,EAEI,KAAC,UAAD;AAAY,MAAA,KAAK,EAAEvB,MAAM,CAACwB,UAA1B;AAAA,gBAEQtB,KAAK,CAACuB,GAAN,CAAU,UAACT,IAAD,EAAU;AAChB,eACI,KAAC,IAAD;AAAM,UAAA,KAAK,EAAEhB,MAAM,CAAC0B,aAApB;AAAA,oBACI,KAAC,QAAD;AAAU,YAAA,KAAK,EAAEV,IAAI,CAACW,EAAtB;AAA0B,YAAA,IAAI,EAAEX,IAAI,CAACY,SAArC;AACI,YAAA,UAAU,EAAE;AAAA,qBAAMpB,WAAU,CAACQ,IAAI,CAACW,EAAN,CAAhB;AAAA;AADhB;AADJ,WAAwCX,IAAI,CAACW,EAA7C,CADJ;AAOH,OARD;AAFR,MAFJ,EAeI,KAAC,cAAD;AAAgB,MAAA,OAAO,EAAEvB;AAAzB,MAfJ;AAAA,IADJ;AAoBH,CAlDD;;AAoDA,eAAeH,GAAf","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { View, Text, Keyboard, ScrollView } from \"react-native\";\nimport TaskInputField from \"./src/components/TaskinputField\";\nimport TaskItem from \"./src/components/TaskItem\"\nimport styles from \"./src/styles/app\"\n\nconst App = () => {\n    const [tasks, setTasks] = useState([])\n\n    const addTask = task => {\n        if (task == null) return\n        setTasks([...tasks, task])\n        Keyboard.dismiss()\n    }\n\n    const deleteTask = async deleteIndex => {\n        setTasks(tasks.filter((value, index) => index != deleteIndex))\n    }\n\n    const getTasks = async() => {\n        try{\n            const response = await fetch('http://localhost:3000/task')\n            const data = response.json()\n            data.then(\n                (val) => setTasks(val)\n            )\n        } catch(error){\n            console.error(error)\n            setTasks([])\n        } \n    }\n\n    useEffect( () => {\n        getTasks()\n    }, [])\n\n    return (\n        <View style={styles.container}>\n            <Text style={styles.title}> Lista de Tarefas</Text>\n            <ScrollView style={styles.scrollView}>\n                {\n                    tasks.map((data) => {\n                        return (\n                            <View style={styles.taskContainer} key={data.id}>\n                                <TaskItem index={data.id} task={data.descricao} \n                                    deleteTask={() => deleteTask(data.id)}\n                                />\n                            </View>\n                        )\n                    })\n                }\n            </ScrollView>\n            <TaskInputField addTask={addTask} />\n        </View>\n    )\n\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}