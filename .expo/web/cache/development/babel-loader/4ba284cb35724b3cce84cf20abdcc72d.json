{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useEffect, useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport TaskInputField from \"./src/components/TaskinputField\";\nimport TaskItem from \"./src/components/TaskItem\";\nimport styles from \"./src/styles/app\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar App = function App() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      tasks = _useState2[0],\n      setTasks = _useState2[1];\n\n  var addTask = function addTask() {\n    getTasks();\n    Keyboard.dismiss();\n  };\n\n  var _deleteTask = function _callee(deleteId) {\n    var requestOptions;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log('Deletar: ' + deleteId);\n            requestOptions = {\n              method: 'DELETE',\n              headers: {\n                'Content-type': 'application/json'\n              }\n            };\n            _context.prev = 2;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(fetch('http://localhost:3000/task/' + deleteId, requestOptions));\n\n          case 5:\n            setTasks(tasks.filter(function (task) {\n              return task.id != deleteId;\n            }));\n            _context.next = 12;\n            break;\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](2);\n            console.log(_context.t0);\n            setTasks([]);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[2, 8]], Promise);\n  };\n\n  var getTasks = function _callee2() {\n    var response, data;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(fetch('http://localhost:3000/task'));\n\n          case 3:\n            response = _context2.sent;\n            data = response.json();\n            data.then(function (val) {\n              return setTasks(val);\n            });\n            _context2.next = 12;\n            break;\n\n          case 8:\n            _context2.prev = 8;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.error(_context2.t0);\n            setTasks([]);\n\n          case 12:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 8]], Promise);\n  };\n\n  useEffect(function () {\n    getTasks();\n  }, []);\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.title,\n      children: \" Lista de Tarefas\"\n    }), _jsx(ScrollView, {\n      style: styles.scrollView,\n      children: tasks.map(function (data) {\n        return _jsx(View, {\n          style: styles.taskContainer,\n          children: _jsx(TaskItem, {\n            index: data.id,\n            task: data.descricao,\n            deleteTask: function deleteTask() {\n              return _deleteTask(data.id);\n            }\n          })\n        }, data.id);\n      })\n    }), _jsx(TaskInputField, {\n      addTask: addTask\n    })]\n  });\n};\n\nexport default App;","map":{"version":3,"sources":["/home/pbattistella/desenvolvimento/react-native/todolist-backend-frontend/frontend/App.js"],"names":["useEffect","useState","TaskInputField","TaskItem","styles","App","tasks","setTasks","addTask","getTasks","Keyboard","dismiss","deleteTask","deleteId","console","log","requestOptions","method","headers","fetch","filter","task","id","response","data","json","then","val","error","container","title","scrollView","map","taskContainer","descricao"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;;;;AAEA,OAAOC,cAAP;AACA,OAAOC,QAAP;AACA,OAAOC,MAAP;;;;AAEA,IAAMC,GAAG,GAAG,SAANA,GAAM,GAAM;AACd,kBAA0BJ,QAAQ,CAAC,EAAD,CAAlC;AAAA;AAAA,MAAOK,KAAP;AAAA,MAAcC,QAAd;;AAEA,MAAMC,OAAO,GAAG,SAAVA,OAAU,GAAM;AAElBC,IAAAA,QAAQ;AACRC,IAAAA,QAAQ,CAACC,OAAT;AACH,GAJD;;AAMA,MAAMC,WAAU,GAAG,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACfC,YAAAA,OAAO,CAACC,GAAR,CAAY,cAAaF,QAAzB;AACMG,YAAAA,cAFS,GAEQ;AACnBC,cAAAA,MAAM,EAAC,QADY;AAEnBC,cAAAA,OAAO,EAAC;AAAC,gCAAgB;AAAjB;AAFW,aAFR;AAAA;AAAA;AAAA,6CAOLC,KAAK,CAAC,gCAAgCN,QAAjC,EAA2CG,cAA3C,CAPA;;AAAA;AAQXT,YAAAA,QAAQ,CAACD,KAAK,CAACc,MAAN,CAAa,UAAAC,IAAI;AAAA,qBAAIA,IAAI,CAACC,EAAL,IAAWT,QAAf;AAAA,aAAjB,CAAD,CAAR;AARW;AAAA;;AAAA;AAAA;AAAA;AAUXC,YAAAA,OAAO,CAACC,GAAR;AACAR,YAAAA,QAAQ,CAAC,EAAD,CAAR;;AAXW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAnB;;AAeA,MAAME,QAAQ,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEcU,KAAK,CAAC,4BAAD,CAFnB;;AAAA;AAEHI,YAAAA,QAFG;AAGHC,YAAAA,IAHG,GAGID,QAAQ,CAACE,IAAT,EAHJ;AAITD,YAAAA,IAAI,CAACE,IAAL,CACI,UAACC,GAAD;AAAA,qBAASpB,QAAQ,CAACoB,GAAD,CAAjB;AAAA,aADJ;AAJS;AAAA;;AAAA;AAAA;AAAA;AAQTb,YAAAA,OAAO,CAACc,KAAR;AACArB,YAAAA,QAAQ,CAAC,EAAD,CAAR;;AATS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAaAP,EAAAA,SAAS,CAAE,YAAM;AACbS,IAAAA,QAAQ;AACX,GAFQ,EAEN,EAFM,CAAT;AAIA,SACI,MAAC,IAAD;AAAM,IAAA,KAAK,EAAEL,MAAM,CAACyB,SAApB;AAAA,eACI,KAAC,IAAD;AAAM,MAAA,KAAK,EAAEzB,MAAM,CAAC0B,KAApB;AAAA;AAAA,MADJ,EAEI,KAAC,UAAD;AAAY,MAAA,KAAK,EAAE1B,MAAM,CAAC2B,UAA1B;AAAA,gBAEQzB,KAAK,CAAC0B,GAAN,CAAU,UAACR,IAAD,EAAU;AAChB,eACI,KAAC,IAAD;AAAM,UAAA,KAAK,EAAEpB,MAAM,CAAC6B,aAApB;AAAA,oBACI,KAAC,QAAD;AAAU,YAAA,KAAK,EAAET,IAAI,CAACF,EAAtB;AAA0B,YAAA,IAAI,EAAEE,IAAI,CAACU,SAArC;AACI,YAAA,UAAU,EAAE;AAAA,qBAAMtB,WAAU,CAACY,IAAI,CAACF,EAAN,CAAhB;AAAA;AADhB;AADJ,WAAwCE,IAAI,CAACF,EAA7C,CADJ;AAOH,OARD;AAFR,MAFJ,EAeI,KAAC,cAAD;AAAgB,MAAA,OAAO,EAAEd;AAAzB,MAfJ;AAAA,IADJ;AAoBH,CA7DD;;AA+DA,eAAeH,GAAf","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { View, Text, Keyboard, ScrollView } from \"react-native\";\nimport TaskInputField from \"./src/components/TaskinputField\";\nimport TaskItem from \"./src/components/TaskItem\"\nimport styles from \"./src/styles/app\"\n\nconst App = () => {\n    const [tasks, setTasks] = useState([])\n\n    const addTask = () => {\n        \n        getTasks()\n        Keyboard.dismiss()\n    }\n\n    const deleteTask = async deleteId => {\n        console.log('Deletar: '+ deleteId)\n        const requestOptions = {\n            method:'DELETE',\n            headers:{'Content-type': 'application/json'}\n        }\n        try{\n            await fetch('http://localhost:3000/task/' + deleteId, requestOptions)\n            setTasks(tasks.filter(task => task.id != deleteId))\n        } catch (error){\n            console.log(error)\n            setTasks([])\n        }\n    }\n\n    const getTasks = async() => {\n        try{\n            const response = await fetch('http://localhost:3000/task')\n            const data = response.json()\n            data.then(\n                (val) => setTasks(val)\n            )\n        } catch(error){\n            console.error(error)\n            setTasks([])\n        } \n    }\n\n    useEffect( () => {\n        getTasks()\n    }, [])\n\n    return (\n        <View style={styles.container}>\n            <Text style={styles.title}> Lista de Tarefas</Text>\n            <ScrollView style={styles.scrollView}>\n                {\n                    tasks.map((data) => {\n                        return (\n                            <View style={styles.taskContainer} key={data.id}>\n                                <TaskItem index={data.id} task={data.descricao} \n                                    deleteTask={() => deleteTask(data.id)}\n                                />\n                            </View>\n                        )\n                    })\n                }\n            </ScrollView>\n            <TaskInputField addTask={addTask} />\n        </View>\n    )\n\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}